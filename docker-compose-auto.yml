version: "3"
services:
  chrome:
    image: selenium/node-chrome:4.6.0-20221104
    container_name: chrome
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443

  selenium-hub:
    image: selenium/hub:4.6.0-20221104
    container_name: selenium-hub
    ports:
      - "4442:4442"
      - "4443:4443"
      - "4444:4444"

  automation-web:
    build: .
    container_name: automation-web
    depends_on:
      - selenium-hub
      - chrome
    environment:
      - NAME_TEST=CRUDProjectTest

# descarga e inicia:  docker-compose -f docker-compose-auto.yml up -d
# descarga e inicia los contenedores:  docker-compose -f docker-compose-auto.yml up -d chrome selenium-hub (Nombre de los contenedores)
# ver si inicio correctamente: docker-compose -f docker-compose-auto.yml  ps
# Lista de contenedores: docker ps -a
# Borrar contenedor: docker rm -f (CONTAINER-ID)

# poner en un archivo ".end" o ".env" para parametrizar las variables de entorno como, NAME_TEST

# Construir el contenedor (Crear imagen): docker-compose -f docker-compose-auto.yml build (NOMBRE CONTAINER)
# Primera forma de ejecutar todos lo comandos del Dockerfile: docker build .
# Segunda forma de ejecutar

# La palabra "image" en la construccion del docker-compose, significa que ira a buscar una imagen a dockerhub
# La palabra "bild ." significa que generara localmente la imagen, desde el archivo Dockerfile

# Ejemplo con el nuevo contenedor
## Levantar los contenedores chrome, selenium-hub: docker-compose -f docker-compose-auto.yml up -d chrome selenium-hub
## Crear la imagen del nuevo contenedor: docker compose -f docker-compose-auto.yml build automation-web
## Iniciamos el nuevo contenedor: docker compose -f docker-compose-auto.yml up automation-web